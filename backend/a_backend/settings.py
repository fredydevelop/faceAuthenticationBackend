"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
import dj_database_url
import environ 

# from dotenv import load_dotenv

# load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()
environ.Env.read_env()
ENVIRONMENT= env("ENVIRONMENT", default="production")




# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = ''

SECRET_KEY = os.getenv('SECRET_KEY', 'fallback-secret-key')


# SECURITY WARNING: don't run with debug turned on in production!




if ENVIRONMENT == "development":
    DEBUG = True
else:
    DEBUG= False


REST_FRAMEWORK={
    "DEFAULT_AUTHENTICATION_CLASSES":("rest_framework_simplejwt.authentication.JWTAuthentication",),
    "DEFAULT_PERMISSION_CLASSES":["rest_framework.permissions.IsAuthenticated",],

}


SIMPLE_JWT={
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME":timedelta(days=1),
}
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "admin_honeypot",
    "rest_framework",
    "corsheaders",
    "api.apps.ApiConfig",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware'
]


ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'a_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {

         'default': {
         'ENGINE': 'django.db.backends.postgresql',
         'NAME': 'postgres',              # Default PostgreSQL database name
         'USER': 'postgres',              # Default PostgreSQL username
         'PASSWORD': 'codedcoder',     # Replace with your actual password
         'HOST': 'localhost',             # The database is on the local machine
         'PORT': '5432',    
     }
    
 }

POSTGRES_LOCALLY=False
if ENVIRONMENT== 'production' or POSTGRES_LOCALLY==True:
    DATABASES = {
        'default': dj_database_url.config(
            default=env('DATABASE_URL', default='postgresql://db_dj9g_user:Co0RMRf6SGVztycktqDhn24JYTaXLkW8@dpg-ctbutcl2ng1s73br460g-a.frankfurt-postgres.render.com/db_dj9g')  # Fallback URL for local testing
        )
    }

# DATABASES = {
#      'default': env.db()
#  }
#DATABASES['default']= dj_database_url.parse(env('DATABASE_URL'))

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'

if not DEBUG:    # Tell Django to copy static assets into a path called `staticfiles` (this is specific to Render)
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


#STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# CORS_ALLOW_ALL_ORIGINS = True

# CORS settings
CORS_ALLOWED_ORIGINS = [
     "https://web-base-faceauth.netlify.app",  # Frontend URL
    "https://faceauthback.onrender.com", 
 ]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_HEADERS = [
    'content-type',
    'authorization',
    'X-CSRFToken',  # Consistent header name for CSRF token
    'x-requested-with',
    'accept',
    'origin',
    'user-agent',
]

CORS_EXPOSE_HEADERS = [
    'content-type',
    'x-requested-with',
    'X-CSRFToken',  # Consistent header name for CSRF token
]

CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS',
    'HEAD',
]


# CSRF settings
CSRF_COOKIE_SECURE = True  # For development only; set to True in production
CSRF_COOKIE_HTTPONLY = False

CSRF_TRUSTED_ORIGINS = [
    'https://web-base-faceauth.netlify.app',
]

# CSRF_COOKIE_NAME = 'csrftoken'


# Ensure ALLOWED_HOSTS is correctly set (if you need specific settings)
ALLOWED_HOSTS = ["https://web-base-faceauth.netlify.app",  # Frontend URL
    "https://faceauthback.onrender.com", ]


# LOGIN_URL = '/accounts/login/'


#newly added

SECURE_SSL_REDIRECT = True  # Redirect all HTTP to HTTPS
SECURE_HSTS_SECONDS = 31536000  # Enable HTTP Strict Transport Security (1 year)
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True


# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'file': {
#             'level': 'ERROR',
#             'class': 'logging.FileHandler',
#             'filename': os.path.join(BASE_DIR, 'logs/error.log'),
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['file'],
#             'level': 'ERROR',
#             'propagate': True,
#         },
#     },
# }

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'profile_images')


ACCOUNT_USERNAME_BLACKLIST= ("Olori_oko")